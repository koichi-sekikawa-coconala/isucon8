.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Kossy 3"
.TH Kossy 3 "2016-07-19" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Kossy \- Sinatra\-ish Simple and Clear web application framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  % kossy\-setup MyApp
\&  % cd MyApp
\&  % plackup app.psgi
\&  
\&  ## lib/MyApp/Web.pm
\&  
\&  use Kossy;
\&  
\&  get \*(Aq/\*(Aq => sub {
\&      my ( $self, $c )  = @_;
\&      $c\->render(\*(Aqindex.tx\*(Aq, { greeting => "Hello!" });
\&  };
\&  
\&  get \*(Aq/json\*(Aq => sub {
\&      my ( $self, $c )  = @_;
\&      my $result = $c\->req\->validator([
\&          \*(Aqq\*(Aq => {
\&              default => \*(AqHello\*(Aq,
\&              rule => [
\&                  [[\*(AqCHOICE\*(Aq,qw/Hello Bye/],\*(AqHello or Bye\*(Aq]
\&              ],
\&          }
\&      ]);
\&      $c\->render_json({ greeting => $result\->valid\->get(\*(Aqq\*(Aq) });
\&  };
\&  
\&  1;
\&  
\&  ## views/index.tx
\&  : cascade base
\&  : around content \-> {
\&    <: $greeting :>
\&  : }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Kossy is Sinatra-ish Simple and Clear web application framework, which is based upon Plack, Router::Boom, Text::Xslate and build-in Form-Validator. That's suitable for small application and rapid development.
.SH "Kossy class"
.IX Header "Kossy class"
Kossy exports some methods to building application
.SS "\s-1CLASS METHODS\s0 for Kossy class"
.IX Subsection "CLASS METHODS for Kossy class"
.ie n .IP "my $kossy = Kossy\->new( root_dir => $root_dir );" 4
.el .IP "my \f(CW$kossy\fR = Kossy\->new( root_dir => \f(CW$root_dir\fR );" 4
.IX Item "my $kossy = Kossy->new( root_dir => $root_dir );"
Create instance of the application object.
.SS "\s-1OBJECT METHODS\s0 for Kossy class"
.IX Subsection "OBJECT METHODS for Kossy class"
.ie n .IP "my $root_dir = $kossy\->\fBroot_dir()\fR;" 4
.el .IP "my \f(CW$root_dir\fR = \f(CW$kossy\fR\->\fBroot_dir()\fR;" 4
.IX Item "my $root_dir = $kossy->root_dir();"
accessor to root directory of the application
.ie n .IP "my $app = $kossy\->\fBpsgi()\fR;" 4
.el .IP "my \f(CW$app\fR = \f(CW$kossy\fR\->\fBpsgi()\fR;" 4
.IX Item "my $app = $kossy->psgi();"
return \s-1PSGI\s0 application
.SS "\s-1DISPATCHER METHODS\s0 for Kossy class"
.IX Subsection "DISPATCHER METHODS for Kossy class"
.IP "filter" 4
.IX Item "filter"
makes application wrapper like plack::middlewares.
.Sp
.Vb 8
\&  filter \*(Aqset_title\*(Aq => sub {
\&      my $app:CODE = shift;
\&      sub {
\&          my ( $self:Kossy, $c:Kossy::Connection )  = @_;
\&          $c\->stash\->{site_name} = _\|_PACKAGE_\|_;
\&          $app\->($self,$c);
\&      }
\&  };
.Ve
.IP "get path:String => [[filters] =>] \s-1CODE\s0" 4
.IX Item "get path:String => [[filters] =>] CODE"
.PD 0
.IP "post path:String => [[filters] =>] \s-1CODE\s0" 4
.IX Item "post path:String => [[filters] =>] CODE"
.PD
setup router and dispatch code
.Sp
.Vb 4
\&  get \*(Aq/\*(Aq => [qw/set_title/] => sub {
\&      my ( $self:Kossy, $c:Kossy::Connection )  = @_;
\&      $c\->render(\*(Aqindex.tx\*(Aq, { greeting => "Hello!" });
\&  };
\&  
\&  get \*(Aq/json\*(Aq => sub {
\&      my ( $self:Kossy, $c:Kossy::Connection )  = @_;
\&      $c\->render_json({ greeting => "Hello!" });
\&  };
.Ve
.Sp
dispatch code shall return Kossy::Response object or \s-1PSGI\s0 response ArrayRef or String.
.IP "router '\s-1HTTP_METHOD\s0'|['\s-1METHOD\s0'[,'\s-1METHOD\s0']] => path:String => [[filters] =>] \s-1CODE\s0" 4
.IX Item "router 'HTTP_METHOD'|['METHOD'[,'METHOD']] => path:String => [[filters] =>] CODE"
adds routing rule other than \s-1GET\s0 and \s-1POST\s0
.Sp
.Vb 4
\&  router \*(AqPUT\*(Aq => \*(Aq/put\*(Aq => sub {
\&      my ( $self:Kossy, $c:Kossy::Connection )  = @_;
\&      $c\->render_json({ greeting => "Hello!" });
\&  };
.Ve
.SH "Kossy::Connection class"
.IX Header "Kossy::Connection class"
per-request object, herds request and response
.SS "\s-1OBJECT METHODS\s0 for Kossy::Connection class"
.IX Subsection "OBJECT METHODS for Kossy::Connection class"
.IP "req:Kossy::Request" 4
.IX Item "req:Kossy::Request"
.PD 0
.IP "res:Kossy::Response" 4
.IX Item "res:Kossy::Response"
.IP "stash:HashRef" 4
.IX Item "stash:HashRef"
.IP "args:HashRef" 4
.IX Item "args:HashRef"
.PD
Router::Simple\->match result
.IP "halt(status_code, message)" 4
.IX Item "halt(status_code, message)"
die and response immediately
.IP "redirect($uri,status_code): Kossy::Response" 4
.IX Item "redirect($uri,status_code): Kossy::Response"
.PD 0
.IP "render($file,$args): Kossy::Response" 4
.IX Item "render($file,$args): Kossy::Response"
.PD
calls Text::Xslate\->render makes response. template files are searching in root_dir/views directory
.Sp
template syntax is Text::Xslate::Syntax::Kolon, can use Kossy::Connection object and fillinform block.
.Sp
.Vb 12
\&   ## template.tx
\&   : block form |  fillinform( $c.req ) \-> {
\&   <head>
\&   <title><: $c.stash.title :></title>
\&   </head>
\&   <body>
\&   <form action="<: $c.req.uri_for(\*(Aq/post\*(Aq) :>">
\&   <input type="text" size="10" name="title" />
\&   <textarea name="body" rows="20" cols="90"></textarea>
\&   </form>
\&   </body>
\&   : }
.Ve
.Sp
also can use Text::Xslate::Bridge::TT2Like and Number::Format methods in your template
.IP "render_json($args): Kossy::Response" 4
.IX Item "render_json($args): Kossy::Response"
serializes arguments with \s-1JSON\s0 and makes response
.Sp
This method escapes '<', '>', and '+' characters by \*(L"\euXXXX\*(R" form. Browser don't detects the \s-1JSON\s0 as \s-1HTML.\s0 And also this module outputs \*(L"X\-Content-Type-Options: nosniff\*(R" header for IEs.
.Sp
render_json have a \s-1JSON\s0 hijacking detection feature same as Amon2::Plugin::Web::JSON. This returns \*(L"403 Forbidden\*(R" response if following pattern request.
.RS 4
.IP "The request have 'Cookie' header." 8
.IX Item "The request have 'Cookie' header."
.PD 0
.IP "The request doesn't have 'X\-Requested\-With' header." 8
.IX Item "The request doesn't have 'X-Requested-With' header."
.IP "The request contains /android/i string in 'User\-Agent' header." 8
.IX Item "The request contains /android/i string in 'User-Agent' header."
.IP "Request method is '\s-1GET\s0'" 8
.IX Item "Request method is 'GET'"
.RE
.RS 4
.RE
.PD
.SH "Kossy::Request"
.IX Header "Kossy::Request"
This class is child class of Plack::Request, decode query/body parameters automatically. Return value of \f(CW$req\fR\->\fBparam()\fR, \f(CW$req\fR\->body_parameters, etc. is the decoded value.
.SS "\s-1OBJECT METHODS\s0 for Kossy::Request class"
.IX Subsection "OBJECT METHODS for Kossy::Request class"
.IP "uri_for($path,$args):String" 4
.IX Item "uri_for($path,$args):String"
build absolute \s-1URI\s0 with path and \f(CW$args\fR
.Sp
.Vb 1
\&  my $uri = $c\->req\->uri_for(\*(Aq/login\*(Aq,[ arg => \*(AqHello\*(Aq]);
.Ve
.IP "validator($rule):Kossy::Validator::Result" 4
.IX Item "validator($rule):Kossy::Validator::Result"
validate parameters using Kossy::Validator
.Sp
.Vb 9
\&  my $result = $c\->req\->validator([
\&    \*(Aqq\*(Aq => [[\*(AqNOT_NULL\*(Aq,\*(Aqquery must be defined\*(Aq]],
\&    \*(Aqlevel\*(Aq => {
\&        default => \*(AqM\*(Aq,
\&        rule => [
\&            [[\*(AqCHOICE\*(Aq,qw/L M Q H/],\*(Aqinvalid level char\*(Aq],
\&        ],
\&    },
\&  ]);
\&
\&  my $val = $result\->valid(\*(Aqq\*(Aq);
\&  my $val = $result\->valid(\*(Aqlevel\*(Aq);
.Ve
.IP "body_parameters_raw" 4
.IX Item "body_parameters_raw"
.PD 0
.IP "query_parameters_raw" 4
.IX Item "query_parameters_raw"
.IP "parameters_raw" 4
.IX Item "parameters_raw"
.IP "param_raw" 4
.IX Item "param_raw"
.PD
These methods are the accessor to raw values. 'raw' means the value is not decoded.
.SH "Kossy::Response"
.IX Header "Kossy::Response"
This class is child class of Plack::Response
.SH "CUSTOMIZE"
.IX Header "CUSTOMIZE"
.IP "X\-Frame-Options" 4
.IX Item "X-Frame-Options"
By default, Kossy outputs \*(L"X\-Frame-Options: \s-1DENY\*(R".\s0 You can change this header
.Sp
.Vb 7
\&  get \*(Aq/iframe\*(Aq => sub {
\&      my ($self, $c) = @_;
\&      $c\->res\->header(\*(AqX\-Frame\-Options\*(Aq,\*(AqSAMEORIGIN\*(Aq);
\&      # or remove from response header
\&      # delete $c\->res\->headers\->remove_header(\*(AqX\-Frame\-Options\*(Aq);
\&      ..
\&  }
.Ve
.Sp
(Default: \s-1DENY\s0)
.IP "kossy.request.parse_json_body" 4
.IX Item "kossy.request.parse_json_body"
If enabled, Kossy will decode json in the request body that has \*(L"application/json\*(R" content header
.Sp
.Vb 5
\&  post \*(Aq/api\*(Aq => sub {
\&      my ($self, $c) = @_;
\&      $c\->env\->{\*(Aqkossy.request.parse_json_body\*(Aq} = 1;
\&      my val = $c\->req\->param(\*(Aqfoo\*(Aq); # bar
\&  }
\&
\&  # requrest
\&  # $ua\->requrest(
\&  #     HTTP::Request\->new(
\&  #         "POST",
\&  #         "http://example.com/api",
\&  #         [ "Content\-Type" => \*(Aqapplication/json\*(Aq, "Content\-Length" => 13 ],
\&  #         \*(Aq{"foo":"bar"}\*(Aq
\&  #     )
\&  # );
.Ve
.ie n .IP "$XSLATE_CACHE, $XSLATE_CACHE_DIR" 4
.el .IP "\f(CW$XSLATE_CACHE\fR, \f(CW$XSLATE_CACHE_DIR\fR" 4
.IX Item "$XSLATE_CACHE, $XSLATE_CACHE_DIR"
Change xslate's cache level and cache directory.
.Sp
.Vb 3
\&  local $Kossy::XSLATE_CACHE = 2;
\&  local $Kossy::XSLATE_CACHE_DIR = $dir;
\&  my $app = MyApp::Web\->psgi;
.Ve
.Sp
By default, \f(CW$XSLATE_CACHE\fR is 1, \f(CW$XSLATE_CACHE_DIR\fR is undef. use Xslate's default.
.ie n .IP "$SECURITY_HEADER" 4
.el .IP "\f(CW$SECURITY_HEADER\fR" 4
.IX Item "$SECURITY_HEADER"
If disabled, Kossy does not set X\-Frame-Options and X\-XSS-Protection. enabled by default.
.Sp
.Vb 2
\&  local $Kossy::SECURITY_HEADER = 0;
\&  my $app = MyApp::Web\->psgi;
.Ve
.Sp
Can not change \f(CW$Kossy::SECURITY_HEADER\fR in your WebApp. It's need to set at build time.
.Sp
This is useful for the benchmark :\-)
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo {at} gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Kossy is small waf, that has only 400 lines code. so easy to reading framework code and customize it. Sinatra-ish router, build-in templating, validators and zero-configuration features are suitable for small application and rapid development.
.PP
Amon2::Lite
.PP
Mojolicious::Lite
.PP
Dancer
.PP
Kossy::Validator
.SH "LICENSE of HTTP::Headers::Fast"
.IX Header "LICENSE of HTTP::Headers::Fast"
Kossy::Headers uses HTTP::Headers::Fast code. Here is \s-1LICENSE\s0 of HTTP::Headers::Fast
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
