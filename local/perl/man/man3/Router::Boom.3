.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Router::Boom 3"
.TH Router::Boom 3 "2016-04-17" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Router::Boom \- Fast routing engine for web applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Router::Boom;
\&
\&    my $router = Router::Boom\->new();
\&    $router\->add(\*(Aq/\*(Aq, \*(Aqdispatch_root\*(Aq);
\&    $router\->add(\*(Aq/entrylist\*(Aq, \*(Aqdispatch_entrylist\*(Aq);
\&    $router\->add(\*(Aq/:user\*(Aq, \*(Aqdispatch_user\*(Aq);
\&    $router\->add(\*(Aq/:user/{year}\*(Aq, \*(Aqdispatch_year\*(Aq);
\&    $router\->add(\*(Aq/:user/{year}/{month:\ed+}\*(Aq, \*(Aqdispatch_month\*(Aq);
\&    $router\->add(\*(Aq/download/*\*(Aq, \*(Aqdispatch_download\*(Aq);
\&
\&    my $dest = $router\->match($env\->{PATH_INFO});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Router::Boom is a fast path routing engine for Perl5.
.SH "MEHTODS"
.IX Header "MEHTODS"
.ie n .IP "my $router = Router::Boom\->\fBnew()\fR" 4
.el .IP "my \f(CW$router\fR = Router::Boom\->\fBnew()\fR" 4
.IX Item "my $router = Router::Boom->new()"
Create new instance.
.ie n .IP "$router\->add($path:Str, $destination:Any)" 4
.el .IP "\f(CW$router\fR\->add($path:Str, \f(CW$destination:Any\fR)" 4
.IX Item "$router->add($path:Str, $destination:Any)"
Add new route.
.ie n .IP "my ($destination, $captured) = $router\->match($path:Str);" 4
.el .IP "my ($destination, \f(CW$captured\fR) = \f(CW$router\fR\->match($path:Str);" 4
.IX Item "my ($destination, $captured) = $router->match($path:Str);"
Matching the route. If matching successfully, this method returns 2 values.
.Sp
First: The destination value, you registered. Second: Captured values from the path.
.Sp
If matching was failed, this method returns empty list.
.SH "HOW TO WRITE A ROUTING RULE"
.IX Header "HOW TO WRITE A ROUTING RULE"
.SS "plain string"
.IX Subsection "plain string"
.Vb 1
\&    $router\->add( \*(Aq/foo\*(Aq, { controller => \*(AqRoot\*(Aq, action => \*(Aqfoo\*(Aq } );
.Ve
.SS ":name notation"
.IX Subsection ":name notation"
.Vb 4
\&    $router\->add( \*(Aq/wiki/:page\*(Aq, { controller => \*(AqWikiPage\*(Aq, action => \*(Aqshow\*(Aq } );
\&    ...
\&    $router\->match(\*(Aq/wiki/john\*(Aq);
\&    # => {controller => \*(AqWikiPage\*(Aq, action => \*(Aqshow\*(Aq}, {page => \*(Aqjohn\*(Aq}
.Ve
.PP
\&':name' notation matches \f(CW\*(C`qr{([^/]+)}\*(C'\fR.
.SS "'*' notation"
.IX Subsection "'*' notation"
.Vb 4
\&    $router\->add( \*(Aq/download/*\*(Aq, { controller => \*(AqDownload\*(Aq, action => \*(Aqfile\*(Aq } );
\&    ...
\&    $router\->match(\*(Aq/download/path/to/file.xml\*(Aq);
\&    # => {controller => \*(AqDownload\*(Aq, action => \*(Aqfile\*(Aq}, {\*(Aq*\*(Aq => \*(Aqpath/to/file.xml\*(Aq}
.Ve
.PP
\&'*' notation matches \f(CW\*(C`qr{(.+)}\*(C'\fR. You will get the captured argument as the special key: \f(CW\*(C`*\*(C'\fR.
.SS "'{year}' notation"
.IX Subsection "'{year}' notation"
.Vb 4
\&    $router\->add( \*(Aq/blog/{year}\*(Aq, { controller => \*(AqBlog\*(Aq, action => \*(Aqyearly\*(Aq } );
\&    ...
\&    $router\->match(\*(Aq/blog/2010\*(Aq);
\&    # => {controller => \*(AqBlog\*(Aq, action => \*(Aqyearly\*(Aq}, {year => 2010}
.Ve
.PP
\&'{year}' notation matches \f(CW\*(C`qr{([^/]+)}\*(C'\fR, and it will be captured.
.SS "'{year:[0\-9]+}' notation"
.IX Subsection "'{year:[0-9]+}' notation"
.Vb 4
\&    $router\->add( \*(Aq/blog/{year:[0\-9]+}/{month:[0\-9]{2}}\*(Aq, { controller => \*(AqBlog\*(Aq, action => \*(Aqmonthly\*(Aq } );
\&    ...
\&    $router\->match(\*(Aq/blog/2010/04\*(Aq);
\&    # => {controller => \*(AqBlog\*(Aq, action => \*(Aqmonthly\*(Aq}, {year => 2010, month => \*(Aq04\*(Aq}
.Ve
.PP
You can specify regular expressions in named captures.
.PP
Note. You can't include normal capture in custom regular expression. i.e. You can't use \f(CW\*(C` {year:(\ed+)} \*(C'\fR.
But you can use \f(CW\*(C`{year:(?:\ed+)}\*(C'\fR.
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
Router::Boom is pretty fast!
.PP
.Vb 3
\&                      Rate Router::Simple   Router::Boom
\&    Router::Simple  8000/s             \-\-           \-90%
\&    Router::Boom   83651/s           946%             \-\-
.Ve
.PP
Router::Boom's computational complexity is not linear scale, bug Router::Simple's computational complexity is linear scale.
.PP
Then, Router::Simple get slower if registered too much routes.
But if you're using Router::Boom then you don't care the performance :)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) tokuhirom.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
tokuhirom <tokuhirom@gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Router::Simple is my old one. But it's bit slow and complicated.
.PP
Path::Dispatcher is similar, but so complex.
.PP
Path::Router is heavy. It depends on Moose.
.PP
HTTP::Router has many dependencies. It is not well documented.
.PP
HTTPx::Dispatcher is my old one. It does not provide an OO-ish interface.
