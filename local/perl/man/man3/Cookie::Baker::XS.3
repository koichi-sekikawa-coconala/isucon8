.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Cookie::Baker::XS 3"
.TH Cookie::Baker::XS 3 "2019-06-07" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cookie::Baker::XS \- boost Cookie::Baker's crush_cookie
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Cookie::Baker::XS qw/crush_cookie/;
\&    
\&    my $cookies_hashref = crush_cookie($headers\->header(\*(AqCookie\*(Aq));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Cookie::Baker::XS provides cookie string parser that implemented by \s-1XS.\s0
This modules only provides parser, does not have a generator function.
.PP
For more details, see Cookie::Baker's document
.SH "BENCHMARK"
.IX Header "BENCHMARK"
.Vb 7
\&  ## length($cookie) == 675
\&  Benchmark: running pp, xs for at least 1 CPU seconds...
\&          pp:  1 wallclock secs ( 1.08 usr +  0.00 sys =  1.08 CPU) @ 16592.59/s (n=17920)
\&          xs:  1 wallclock secs ( 1.05 usr +  0.00 sys =  1.05 CPU) @ 182043.81/s (n=191146)
\&         Rate   pp   xs
\&  pp  16593/s   \-\- \-91%
\&  xs 182044/s 997%   \-\-
\&  
\&  ## length($cookie) == 17
\&  Benchmark: running pp, xs for at least 1 CPU seconds...
\&          pp:  2 wallclock secs ( 1.05 usr +  0.01 sys =  1.06 CPU) @ 201749.06/s (n=213854)
\&          xs:  0 wallclock secs ( 1.19 usr +  0.01 sys =  1.20 CPU) @ 1042617.50/s (n=1251141)
\&          Rate   pp   xs
\&  pp  201749/s   \-\- \-81%
\&  xs 1042618/s 417%   \-\-
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cookie::Baker
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Masahiro Nagano.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo@gmail.com>
