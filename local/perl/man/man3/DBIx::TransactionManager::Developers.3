.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::TransactionManager::Developers 3"
.TH DBIx::TransactionManager::Developers 3 "2014-05-29" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::TransactionManager::Developers \- docs for developers
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes a document for O/R mapper writer and/or DBIx::* writer.
.SH "MORE DOCUMETNS for DBIx::TransactionManager class"
.IX Header "MORE DOCUMETNS for DBIx::TransactionManager class"
.ie n .IP "my $txn = $tm\->txn_scope(%args)" 4
.el .IP "my \f(CW$txn\fR = \f(CW$tm\fR\->txn_scope(%args)" 4
.IX Item "my $txn = $tm->txn_scope(%args)"
Create a new DBIx::TransactionManager::ScopeGuard's instance object.
.Sp
You can pass an optional argument to \f(CW%args\fR, to tell the scope guard
where the scope was generated, like so:
.Sp
.Vb 7
\&    package Foo;
\&    use Moose;
\&    sub mymethod {
\&        my $self = shift;
\&        my $txn = $tm\->txn_scope( caller => [ caller() ] );
\&        return $txn;
\&    }
\&
\&    package main;
\&    my $obj = Foo\->new();
\&    my $txn = $obj\->mymethod();
.Ve
.Sp
This will allow the guard object to report the caller's location
from the perspective of \f(CW\*(C`mymethod()\*(C'\fR, not where \f(CW\*(C`txn_scope()\*(C'\fR was
called.
.Sp
see \*(L"DBIx::TransactionManager::ScopeGuard's \s-1METHODS\*(R"\s0
.ie n .IP "$tm\->txn_begin(%args)" 4
.el .IP "\f(CW$tm\fR\->txn_begin(%args)" 4
.IX Item "$tm->txn_begin(%args)"
Start the transaction.
.Sp
\&\f(CW\*(C`txn_begin\*(C'\fR may optionally take a 'caller' argument. This will allow you to
provide caller information which will be used in \f(CW\*(C`in_transaction\*(C'\fR. For example
if you have a wrapper function that calls \f(CW\*(C`txn_begin\*(C'\fR, you may want to 
let the user think that the caller was one stack above your wrapper.
.Sp
.Vb 2
\&    # use _\|_my_\|_ caller!
\&    $tm\->txn_begin( caller => [ caller(0) ] );
.Ve
.ie n .IP "$tm\->\fBtxn_commit()\fR" 4
.el .IP "\f(CW$tm\fR\->\fBtxn_commit()\fR" 4
.IX Item "$tm->txn_commit()"
Commit the current transaction.
.Sp
If the \f(CW$dbh\fR is in a nested transaction, TransactionManager doesn't do \s-1COMMIT\s0 at here. \s-1TM\s0 just poped transaction stack and do nothing.
.ie n .IP "$tm\->\fBtxn_rollback()\fR" 4
.el .IP "\f(CW$tm\fR\->\fBtxn_rollback()\fR" 4
.IX Item "$tm->txn_rollback()"
Rollback the current transaction.
.Sp
If the \f(CW$dbh\fR is in a nested transaction, TransactionManager doesn't do \s-1ROLLBACK\s0 at here. \s-1TM\s0 just poped transaction stack and do nothing.
.ie n .IP "$tm\->\fBin_transaction()\fR : Bool" 4
.el .IP "\f(CW$tm\fR\->\fBin_transaction()\fR : Bool" 4
.IX Item "$tm->in_transaction() : Bool"
Returns true if \f(CW$txn\fR is currently in a middle of a transaction. While normally
you only need to use this value as a boolean, it actually returns a hashref
consisting of 'caller' and 'pid' element. This will tell you exactly where
the currently valid transaction started.
