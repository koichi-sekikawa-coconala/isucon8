.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Router::Boom::Method 3"
.TH Router::Boom::Method 3 "2016-04-17" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Router::Boom::Method \- Router::Boom with HTTP method support
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Router::Boom doesn't care the routing with \s-1HTTP\s0 method. It's simple and good.
But it makes hard to implement the rule like this:
.PP
.Vb 2
\&    get  \*(Aq/\*(Aq => sub { \*(Aqget ok\*(Aq  };
\&    post \*(Aq/\*(Aq => sub { \*(Aqpost ok\*(Aq };
.Ve
.PP
Then, this class helps you.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """my $router = Router::Boom::Method\->new()""" 4
.el .IP "\f(CWmy $router = Router::Boom::Method\->new()\fR" 4
.IX Item "my $router = Router::Boom::Method->new()"
Create new instance.
.ie n .IP """$router\->add($http_method:Str|ArrayRef[Str], $path:Str, $opaque:Any)""" 4
.el .IP "\f(CW$router\->add($http_method:Str|ArrayRef[Str], $path:Str, $opaque:Any)\fR" 4
.IX Item "$router->add($http_method:Str|ArrayRef[Str], $path:Str, $opaque:Any)"
Add new path to the router.
.Sp
\&\f(CW$http_method\fR is a string to represent \s-1HTTP\s0 method. i.e. \s-1GET, POST, DELETE, PUT,\s0 etc.
The path can handle any \s-1HTTP\s0 methods, you'll path the \f(CW\*(C`undef\*(C'\fR for this argument.
You can specify the multiple \s-1HTTP\s0 methods in ArrayRef like \f(CW\*(C`$router\->add([qw(GET HEAD)], \*(Aq/\*(Aq, \*(Aqtop\*(Aq)\*(C'\fR.
It will be matching with the \f(CW\*(C`REQUEST_METHOD\*(C'\fR.
.Sp
\&\f(CW$path\fR is the path string. It will be matching with the \f(CW\*(C`PATH_INFO\*(C'\fR.
.Sp
\&\f(CW$opaque\fR is the destination path data. Any data is \s-1OK.\s0
.ie n .IP """my ($dest, $captured, $is_method_not_allowed, $allowed_methods) = $router\->match($http_method:Str, $path:Str)""" 4
.el .IP "\f(CWmy ($dest, $captured, $is_method_not_allowed, $allowed_methods) = $router\->match($http_method:Str, $path:Str)\fR" 4
.IX Item "my ($dest, $captured, $is_method_not_allowed, $allowed_methods) = $router->match($http_method:Str, $path:Str)"
Matching with the router.
.Sp
\&\f(CW$http_method\fR is the \s-1HTTP\s0 request method. It's \f(CW\*(C`$env\->{REQUEST_METHOD}\*(C'\fR in \s-1PSGI.\s0
.Sp
\&\f(CW$path\fR is the path string. It's \f(CW\*(C`$env\->{PATH_INFO}\*(C'\fR in \s-1PSGI.\s0
.Sp
\&\fIReturn Value:\fR
.Sp
If the request is not matching with any path, this method returns empty list.
.Sp
If the request is matched well then, return \f(CW$dest\fR, \f(CW$captured\fR. And \f(CW$is_method_not_allowed\fR is false value.
.Sp
If the request path is matched but the \f(CW$http_method\fR is not matched, then \f(CW$dest\fR and \f(CW$captured\fR is undef. And \f(CW$is_method_not_allowed\fR is true value. You got this then you need to return \f(CW\*(C`405 Method Not Allowed\*(C'\fR error.
.Sp
If the request path is matched but the \f(CW$http_method\fR is not matched, then \f(CW$dest\fR and \f(CW$captured\fR is undef. And \f(CW$allowed_methods\fR is ArrayRef. You got this then you need to return \f(CW\*(C`405 Method Not Allowed\*(C'\fR error with \f(CW\*(C`Allow\*(C'\fR header.
.ie n .IP """my $regexp = $router\->regexp()""" 4
.el .IP "\f(CWmy $regexp = $router\->regexp()\fR" 4
.IX Item "my $regexp = $router->regexp()"
Get a compiled regexp for debugging.
.ie n .IP """my @routes = $router\->routes()""" 4
.el .IP "\f(CWmy @routes = $router\->routes()\fR" 4
.IX Item "my @routes = $router->routes()"
\&\fB\s-1EXPERIMENTAL\s0\fR
.Sp
Get the list of registered routes. Every routes has following schema.
.Sp
.Vb 1
\&    [Maybe[ArrayRef], Str, Any]
.Ve
.Sp
For example:
.Sp
.Vb 1
\&    [[\*(AqGET\*(Aq,\*(AqHEAD\*(Aq], "/foo", \e&dispatch_foo]
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Tokuhiro Matsuno
