.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Kossy::Validator 3"
.TH Kossy::Validator 3 "2019-08-10" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Kossy::Validator \- form validator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Kossy::Validator;
\&  
\&  my $req = Plack::Request\->new($env);
\&  
\&  my $result = Kossy::Validator\->check($req, [
\&        \*(Aqq\*(Aq => [[\*(AqNOT_NULL\*(Aq,\*(Aqquery must be defined\*(Aq]],
\&        \*(Aqlevel\*(Aq => {
\&            default => \*(AqM\*(Aq, # or sub { \*(AqM\*(Aq }
\&            rule => [
\&                [[\*(AqCHOICE\*(Aq,qw/L M Q H/],\*(Aqinvalid level char\*(Aq],
\&            ],
\&        },
\&        \*(Aq@area\*(Aq => {
\&            rule => [
\&                [\*(AqUINT\*(Aq,\*(Aqarea must be uint\*(Aq],
\&                [[\*(AqCHOICE\*(Aq, (0..40)],\*(Aqinvalid area\*(Aq],
\&            ],
\&        },
\&  ]);
\&
\&  $result\->has_error:Flag
\&  $result\->messages:ArrayRef[\`Str]
\&
\&  my $val = $result\->valid(\*(Aqq\*(Aq);
\&  my @val = $result\->valid(\*(Aqarea\*(Aq);
\&
\&  my $hash = $result\->valid:Hash::MultiValue;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
minimalistic form validator used in Kossy
.SH "VALIDATORS"
.IX Header "VALIDATORS"
.IP "\s-1NOT_NULL\s0" 4
.IX Item "NOT_NULL"
.PD 0
.IP "\s-1CHOICE\s0" 4
.IX Item "CHOICE"
.PD
.Vb 1
\&  [\*(AqCHOICE\*(Aq,qw/dog cat/]
.Ve
.IP "\s-1INT\s0" 4
.IX Item "INT"
int
.IP "\s-1UINT\s0" 4
.IX Item "UINT"
unsigned int
.IP "\s-1NATURAL\s0" 4
.IX Item "NATURAL"
natural number
.IP "\s-1REAL, DOUBLE, FLOAT\s0" 4
.IX Item "REAL, DOUBLE, FLOAT"
floating number
.ie n .IP "@SELECTED_NUM" 4
.el .IP "\f(CW@SELECTED_NUM\fR" 4
.IX Item "@SELECTED_NUM"
.Vb 1
\&  [\*(Aq@SELECTED_NUM\*(Aq,min,max]
.Ve
.ie n .IP "@SELECTED_UNIQ" 4
.el .IP "\f(CW@SELECTED_UNIQ\fR" 4
.IX Item "@SELECTED_UNIQ"
all selected values are unique
.SH "CODEref VALIDATOR"
.IX Header "CODEref VALIDATOR"
.Vb 7
\&  my $result = Kossy::Validator\->check($req,[
\&      \*(Aqq\*(Aq => [
\&          [sub{
\&              my ($req,$val) = @_;
\&          },\*(Aqinvalid\*(Aq]
\&      ],
\&  ]);
\&  
\&  my $result = Kossy::Validator\->check($req,[
\&      \*(Aqq\*(Aq => [
\&          [[sub{
\&              my ($req,$val,@args) = @_;
\&          },0,1],\*(Aqinvalid\*(Aq]
\&      ],
\&  ]);
.Ve
.SH "ADDING VALIDATORS"
.IX Header "ADDING VALIDATORS"
add to \f(CW%Kossy::Validator::VALIDATOR\fR
.PP
.Vb 4
\&  local $Kossy::Validator::VALIDATOR{MYRULE} = sub {
\&      my ($req, $val, @args) = @_;
\&      return 1;
\&  };
\&
\&  local $Kossy::Validator::VALIDATOR{\*(Aq@MYRULE2\*(Aq} = sub {
\&      my ($req, $vals, $num) = @_;
\&      return if @$vals != $num;
\&      return if uniq(@$vals) == $num;
\&  };
\&
\&  Kossy::Validator\->check($req,[
\&      key1 => [[\*(AqMYRULE\*(Aq,\*(Aqmy rule\*(Aq]],
\&      \*(Aq@key2\*(Aq => {
\&         rule => [
\&             [[\*(Aq@MYRULE2\*(Aq,3], \*(Aqselect 3 items\*(Aq],
\&             [[\*(AqCHOICE\*(Aq,qw/1 2 3 4 5/], \*(Aqinvalid\*(Aq]
\&         ],
\&      }
\&  ]);
.Ve
.PP
if rule name start with '@', all values are passed as ArrayRef instead of last value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Kossy
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Masahiro Nagano.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo@gmail.com>
