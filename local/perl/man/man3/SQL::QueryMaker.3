.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::QueryMaker 3"
.TH SQL::QueryMaker 3 "2014-07-30" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::QueryMaker \- helper functions for SQL query generation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $query = sql_eq(foo => $v);
\&    $query\->as_sql;                 # \`foo\`=?
\&    $query\->bind;                   # ($v)
\&
\&    my $query = sql_lt(foo => $v);
\&    $query\->as_sql;                 # \`foo\`<?
\&    $query\->bind;                   # ($v)
\&
\&    my $query = sql_in(foo => [
\&        $v1, $v2, $v3,
\&    ]);
\&    $query\->as_sql;                 # \`foo\` IN (?,?,?)
\&    $query\->bind;                   # ($v1,$v2,$v3)
\&
\&    my $query = sql_and(foo => [
\&        sql_ge($min),
\&        sql_lt($max)
\&    ]);
\&    $query\->as_sql;                 # \`foo\`>=? AND \`foo\`<?
\&    $query\->bind;                   # ($min,$max)
\&
\&    my $query = sql_and([
\&        sql_eq(foo => $v1),
\&        sql_eq(bar => $v2)
\&    ];
\&    $query\->as_sql;                 # \`foo\`=? AND \`bar\`=?
\&    $query\->bind;                   # ($v1,$v2)
\&
\&    my $query = sql_and([
\&        foo => $v1,
\&        bar => sql_lt($v2),
\&    ]);
\&    $query\->as_sql;                 # \`foo\`=? AND \`bar\`<?
\&    $query\->bind;                   # ($v1,$v2)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module concentrates on providing an expressive, concise way to declare \s-1SQL\s0
expressions by exporting carefully-designed functions.
It is possible to use the module to generate \s-1SQL\s0 query conditions and pass them
as arguments to other more versatile query builders such as SQL::Maker.
.PP
The functions exported by the module instantiate comparator objects that build
\&\s-1SQL\s0 expressions when their \f(CW\*(C`as_sql\*(C'\fR method are being invoked.
There are two ways to specify the names of the columns to the comparator; to
pass in the names as argument or to specify then as an argument to the
\&\f(CW\*(C`as_sql\*(C'\fR method.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """sql_eq([$column,] $value)"""
.el .SS "\f(CWsql_eq([$column,] $value)\fP"
.IX Subsection "sql_eq([$column,] $value)"
.ie n .SS """sql_ne([$column,] $value)"""
.el .SS "\f(CWsql_ne([$column,] $value)\fP"
.IX Subsection "sql_ne([$column,] $value)"
.ie n .SS """sql_lt([$column,] $value)"""
.el .SS "\f(CWsql_lt([$column,] $value)\fP"
.IX Subsection "sql_lt([$column,] $value)"
.ie n .SS """sql_gt([$column,] $value)"""
.el .SS "\f(CWsql_gt([$column,] $value)\fP"
.IX Subsection "sql_gt([$column,] $value)"
.ie n .SS """sql_le([$column,] $value)"""
.el .SS "\f(CWsql_le([$column,] $value)\fP"
.IX Subsection "sql_le([$column,] $value)"
.ie n .SS """sql_ge([$column,] $value)"""
.el .SS "\f(CWsql_ge([$column,] $value)\fP"
.IX Subsection "sql_ge([$column,] $value)"
.ie n .SS """sql_like([$column,] $value)"""
.el .SS "\f(CWsql_like([$column,] $value)\fP"
.IX Subsection "sql_like([$column,] $value)"
.ie n .SS """sql_is_null([$column])"""
.el .SS "\f(CWsql_is_null([$column])\fP"
.IX Subsection "sql_is_null([$column])"
.ie n .SS """sql_is_not_null([$column])"""
.el .SS "\f(CWsql_is_not_null([$column])\fP"
.IX Subsection "sql_is_not_null([$column])"
.ie n .SS """sql_not([$column])"""
.el .SS "\f(CWsql_not([$column])\fP"
.IX Subsection "sql_not([$column])"
.ie n .SS """sql_between([$column,] $min_value, $max_value)"""
.el .SS "\f(CWsql_between([$column,] $min_value, $max_value)\fP"
.IX Subsection "sql_between([$column,] $min_value, $max_value)"
.ie n .SS """sql_not_between([$column,] $min_value, $max_value)"""
.el .SS "\f(CWsql_not_between([$column,] $min_value, $max_value)\fP"
.IX Subsection "sql_not_between([$column,] $min_value, $max_value)"
.ie n .SS """sql_in([$column,] \e@values)"""
.el .SS "\f(CWsql_in([$column,] \e@values)\fP"
.IX Subsection "sql_in([$column,] @values)"
.ie n .SS """sql_not_in([$column,] \e@values)"""
.el .SS "\f(CWsql_not_in([$column,] \e@values)\fP"
.IX Subsection "sql_not_in([$column,] @values)"
Instantiates a comparator object that tests a column against given value(s).
.ie n .SS """sql_and([$column,] \e@conditions)"""
.el .SS "\f(CWsql_and([$column,] \e@conditions)\fP"
.IX Subsection "sql_and([$column,] @conditions)"
.ie n .SS """sql_or([$ column,] \e@conditions)"""
.el .SS "\f(CWsql_or([$ column,] \e@conditions)\fP"
.IX Subsection "sql_or([$ column,] @conditions)"
Aggregates given comparator objects into a logical expression.
.PP
If specified, the column name is pushed down to the arguments when the
\&\f(CW\*(C`as_sql\*(C'\fR method is being called, as show in the second example below.
.PP
.Vb 4
\&    sql_and([                   # => \`foo\`=? AND \`bar\`<?
\&        sql_eq("foo" => $v1),
\&        sql_lt("bar" => $v2)
\&    ])
\&
\&    sql_and("foo" => [          # => \`foo\`>=$min OR \`foo\`<$max
\&        sql_ge($min),
\&        sql_lt($max),
\&    ])
.Ve
.ie n .SS """sql_and(\e%conditions)"""
.el .SS "\f(CWsql_and(\e%conditions)\fP"
.IX Subsection "sql_and(%conditions)"
.ie n .SS """sql_or(\e%conditions)"""
.el .SS "\f(CWsql_or(\e%conditions)\fP"
.IX Subsection "sql_or(%conditions)"
Aggregates given pairs of column names and comparators into a logical
expression.
.PP
The value part is composed of as the argument to the \f(CW\*(C`=\*(C'\fR operator if it is
not a blessed reference.
.PP
.Vb 6
\&    my $query = sql_and({
\&        foo => \*(Aqabc\*(Aq,
\&        bar => sql_lt(123),
\&    });
\&    $query\->as_sql;             # => \`foo\`=? AND bar<?
\&    $query\->bind;               # => (\*(Aqabc\*(Aq, 123)
.Ve
.ie n .SS """sql_op([$column,] $op_sql, \e@bind_values)"""
.el .SS "\f(CWsql_op([$column,] $op_sql, \e@bind_values)\fP"
.IX Subsection "sql_op([$column,] $op_sql, @bind_values)"
Generates a comparator object that tests a column using the given \s-1SQL\s0 and
values.  \f(CW\*(C`<@\*(C'\fR> in the given \s-1SQL\s0 are replaced by the column name (specified
either by the argument to the function or later by the call to the \f(CW\*(C`<as_sql\*(C'\fR>
method), and \f(CW\*(C`<?\*(C'\fR> are substituted by the given bind values.
.ie n .SS """sql_raw($sql, @bind_values)"""
.el .SS "\f(CWsql_raw($sql, @bind_values)\fP"
.IX Subsection "sql_raw($sql, @bind_values)"
Generates a comparator object from raw \s-1SQL\s0 and bind values.  \f(CW\*(C`<?\*(C'\fR> in the
given \s-1SQL\s0 are replaced by the bind values.
.ie n .SS """$obj\->as_sql()"""
.el .SS "\f(CW$obj\->as_sql()\fP"
.IX Subsection "$obj->as_sql()"
.ie n .SS """$obj\->as_sql($column_name)"""
.el .SS "\f(CW$obj\->as_sql($column_name)\fP"
.IX Subsection "$obj->as_sql($column_name)"
.ie n .SS """$obj\->as_sql($column_name, $quote_identifier_cb)"""
.el .SS "\f(CW$obj\->as_sql($column_name, $quote_identifier_cb)\fP"
.IX Subsection "$obj->as_sql($column_name, $quote_identifier_cb)"
Compiles given comparator object and returns an \s-1SQL\s0 expression.
Corresponding bind values should be obtained by calling the \f(CW\*(C`bind\*(C'\fR method.
.PP
The function optionally accepts a column name to which the comparator object
should be bound; an error is thrown if the comparator object is already bound
to another column.
.PP
The function also accepts a callback for quoting the identifiers.  If omitted,
the identifiers are quoted using \f(CW\*(C`\`\*(C'\fR after being splitted using \f(CW\*(C`.\*(C'\fR; i.e. a
column designated as \f(CW\*(C`foo.bar\*(C'\fR is quoted as \f(CW\*(C`\`foo\`.\`bar\`\*(C'\fR.
.ie n .SS """$obj\->bind()"""
.el .SS "\f(CW$obj\->bind()\fP"
.IX Subsection "$obj->bind()"
Returns a list of bind values corresponding to the \s-1SQL\s0 expression returned by
the \f(CW\*(C`as_sql\*(C'\fR method.
.SH "CHEAT SHEET"
.IX Header "CHEAT SHEET"
.Vb 3
\&    IN:        sql_eq(\*(Aqfoo\*(Aq => \*(Aqbar\*(Aq)
\&    OUT QUERY: \*(Aq\`foo\` = ?\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq)
\&
\&    IN:        sql_ne(\*(Aqfoo\*(Aq => \*(Aqbar\*(Aq)
\&    OUT QUERY: \*(Aq\`foo\` != ?\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq)
\&
\&    IN:        sql_in(\*(Aqfoo\*(Aq => [\*(Aqbar\*(Aq, \*(Aqbaz\*(Aq])
\&    OUT QUERY: \*(Aq\`foo\` IN (?,?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        sql_and([sql_eq(\*(Aqfoo\*(Aq => \*(Aqbar\*(Aq), sql_eq(\*(Aqbaz\*(Aq => 123)])
\&    OUT QUERY: \*(Aq(\`foo\` = ?) AND (\`baz\` = ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,123)
\&
\&    IN:        sql_and(\*(Aqfoo\*(Aq => [sql_ge(3), sql_lt(5)])
\&    OUT QUERY: \*(Aq(\`foo\` >= ?) AND (\`foo\` < ?)\*(Aq
\&    OUT BIND:  (3,5)
\&
\&    IN:        sql_or([sql_eq(\*(Aqfoo\*(Aq => \*(Aqbar\*(Aq), sql_eq(\*(Aqbaz\*(Aq => 123)])
\&    OUT QUERY: \*(Aq(\`foo\` = ?) OR (\`baz\` = ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,123)
\&
\&    IN:        sql_or(\*(Aqfoo\*(Aq => [\*(Aqbar\*(Aq, \*(Aqbaz\*(Aq])
\&    OUT QUERY: \*(Aq(\`foo\` = ?) OR (\`foo\` = ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        sql_is_null(\*(Aqfoo\*(Aq)
\&    OUT QUERY: \*(Aq\`foo\` IS NULL\*(Aq
\&    OUT BIND:  ()
\&
\&    IN:        sql_is_not_null(\*(Aqfoo\*(Aq)
\&    OUT QUERY: \*(Aq\`foo\` IS NOT NULL\*(Aq
\&    OUT BIND:  ()
\&
\&    IN:        sql_between(\*(Aqfoo\*(Aq, 1, 2)
\&    OUT QUERY: \*(Aq\`foo\` BETWEEN ? AND ?\*(Aq
\&    OUT BIND:  (1,2)
\&
\&    IN:        sql_not(\*(Aqfoo\*(Aq)
\&    OUT QUERY: \*(AqNOT \`foo\`\*(Aq
\&    OUT BIND:  ()
\&
\&    IN:        sql_op(\*(Aqapples\*(Aq, \*(AqMATCH (@) AGAINST (?)\*(Aq, [\*(Aqoranges\*(Aq])
\&    OUT QUERY: \*(AqMATCH (\`apples\`) AGAINST (?)\*(Aq
\&    OUT BIND:  (\*(Aqoranges\*(Aq)
\&
\&    IN:        sql_raw(\*(AqSELECT * FROM t WHERE id=?\*(Aq,123)
\&    OUT QUERY: \*(AqSELECT * FROM t WHERE id=?\*(Aq
\&    OUT BIND:  (123)
\&
\&    IN:        sql_in(\*(Aqfoo\*(Aq, => [123,sql_raw(\*(AqSELECT id FROM t WHERE cat=?\*(Aq,5)])
\&    OUT QUERY: \*(Aq\`foo\` IN (?,(SELECT id FROM t WHERE cat=?))\*(Aq
\&    OUT BIND:  (123,5)
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kazuho Oku
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Abstract
SQL::Maker
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, or under the \s-1MIT\s0 License.
