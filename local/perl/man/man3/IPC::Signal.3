.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Signal 3"
.TH Signal 3 "1998-10-27" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IPC::Signal \- Utility functions dealing with signals
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    $number = sig_num $name;
\&    $name   = sig_name $number;
\&
\&    sig_translate_setup;
\&    $number = $Sig_num{$name};
\&    $name   = $Sig_name[$number];
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains utility functions for dealing with signals.
.PP
Nothing is exported by default.
.IP "\fBsig_num\fR \fIchopped-signal-name\fR" 4
.IX Item "sig_num chopped-signal-name"
Returns the signal number of the signal whose name (sans \f(CW\*(C`SIG\*(C'\fR) is
\&\fIchopped-signal-name\fR, or undef if there is no such signal.
.Sp
This function is prototyped to take a single scalar argument.
.IP "\fBsig_name\fR \fIsignal-number\fR" 4
.IX Item "sig_name signal-number"
Returns the chopped signal name (like \f(CW\*(C`HUP\*(C'\fR) of signal number
\&\fIsignal-number\fR, or undef if there is no such signal.
.Sp
This function is prototyped to take a single scalar argument.
.IP "\fBsig_translate_setup\fR" 4
.IX Item "sig_translate_setup"
If you want to use the \f(CW@Sig_name\fR and \f(CW%Sig_num\fR variables directly you must
call \fBsig_translate_setup\fR to initialize them.  This isn't necessary if
you only use the function interfaces \fBsig_name()\fR and \fBsig_num()\fR.
.Sp
This function is prototyped to take no arguments.
.IP "\fB\f(CB%Sig_num\fB\fR" 4
.IX Item "%Sig_num"
A hash with chopped signal name keys (like \f(CW\*(C`HUP\*(C'\fR) and integer signal
number values.
.IP "\fB\f(CB@Sig_name\fB\fR" 4
.IX Item "@Sig_name"
An array mapping signal numbers to chopped signal names (like \f(CW\*(C`HUP\*(C'\fR).
.SH "AUTHOR"
.IX Header "AUTHOR"
Roderick Schertler <\fIroderick@argon.org\fR>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1).
